/*------------------------------------*\
    #TOOLS.MIXINS
\*------------------------------------*/

@mixin cover() {
  background-repeat   : no-repeat;
  background-size     : cover;
  background-position : center;
}

@mixin contain() {
  background-repeat   : no-repeat;
  background-size     : contain;
  background-position : center;

}

@mixin clearfix() {
  &:before,
  &:after {
    content : " ";
    display : table;
  }
  &:after {
    clear : both;
  }
}

@mixin vertical-align($position: relative) {
  position  : $position;
  top       : 50%;
  transform : translateY(-50%);
}

@mixin horizontal-align($position: relative) {
  position  : $position;
  left      : 50%;
  transform : translateX(-50%);
}

@mixin retinaImage1point5($imageLocation, $twoXImageLocation, $width, $height) {
  background-image  : url($imageLocation);
  background-repeat : no-repeat;

  @media only screen and (-webkit-min-device-pixel-ratio : 1.5),
  only screen and (min--moz-device-pixel-ratio : 1.5),
  only screen and (-o-min-device-pixel-ratio : 2/1),
  only screen and (min-device-pixel-ratio : 1.5),
  only screen and (min-resolution : 192dpi),
  only screen and (min-resolution : 2dppx) {
    background-image : url($twoXImageLocation) !important;
    background-size  : $width $height;
  }
}

// Generic responsive Mixin
// --------------------------------------------------
@mixin responsive($attr, $xs: null, $sm: null, $md: null, $lg: null, $xl: null, $xxl: null) {

  #{$attr}: $xs;

  @if $sm {
    @media screen and (min-width : 480px) {
      #{$attr}: $sm;
    }
  }
  @if $md {
    @media screen and (min-width : $screen-sm) {
      #{$attr}: $md;
    }
  }
  @if $lg {
    @media screen and (min-width : $screen-md) {
      #{$attr}: $lg;
    }
  }
  @if $xl {
    @media screen and (min-width : $screen-lg) {
      #{$attr}: $xl;
    }
  }
  @if $xxl {
    @media screen and (min-width : 1550px) {
      #{$attr}: $xxl;
    }
  }
}


/**
 * VH and VW units can cause issues on iOS devices: http://caniuse.com/#feat=viewport-units
 *
 * To overcome this, create media queries that target the width, height, and orientation of iOS devices.
 * It isn't optimal, but there is really no other way to solve the problem. In this example, I am fixing
 * the height of element `.foo` â€”which is a full width and height cover image.
 *
 * iOS Resolution Quick Reference: http://www.iosres.com/
 */


@mixin iosHeights($height){

  //iPhone 3 and 4 portrait
  @media all and (device-width : 320px) and (device-height : 480px) and (orientation : portrait) {
    height : 1px*$height!important;
  }

  //iPhone 3 and 4 landscape
  @media all and (device-width : 320px) and (device-height : 480px) and (orientation : landscape) {
    height : 1px*$height!important;
  }

  //iPhone 5 portrait
  @media all and (device-width : 320px) and (device-height : 568px) and (orientation : portrait) {
    height : 1px*$height!important;
  }

  //iPhone 5 landscape
  @media all and (device-width : 320px) and (device-height : 568px) and (orientation : landscape) {
    height : 1px*$height!important;
  }

  //iPad portrait
  @media all and (device-width : 768px) and (device-height : 1024px) and (orientation : portrait) {
    height : 1px*$height!important;
  }

  //iPad landscape
  @media all and (device-width : 768px) and (device-height : 1024px) and (orientation : landscape) {
    height : 1px*$height!important;
  }

}